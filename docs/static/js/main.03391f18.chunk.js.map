{"version":3,"sources":["components/API/index.js","components/PokeBar.js","components/ListPoke.js","components/PokeCard.js","components/PokeList.js","components/PokeListWeather.js","components/PokedexHeader.js","App.js","serviceWorker.js","index.js"],"names":["url","PokeBar","getByTypeCat","home","Navbar","collapseOnSelect","expand","bg","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","className","Link","ListPoke","title","filterTypes","ListGroup","Item","onClick","PokeCard","pokemonCard","Card","style","width","Body","Title","Name","Text","ATK","DEF","STA","to","PokeList","data","functionFilter","pokemons","useEffect","Container","fluid","Row","Col","xl","length","map","item","index","key","PokeListWeather","match","useState","pageTitle","setPageTitle","renderDetails","setRenderDetails","params","pgt","fetch","then","response","json","dados","catch","e","console","log","res","getPokesByName","pokeNum","Generation","typeOne","statTotal","PokedexHeader","Jumbotron","height","App","setPokemons","category","setCategory","basename","getByWeatherCat","exact","path","type","array","v","push","Set","pokes","add","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.03391f18.chunk.js","sourcesContent":["const url = \"https://oseiasnascimento.herokuapp.com\"\r\n\r\nexport const getAllPokes = () => fetch(`${url}/getall`)\r\n    .then(response => response.json())\r\n    .then((dados) => dados)\r\n    .catch((e) => console.log(e));\r\n\r\nexport const filterPokesByTypeOne = (typeOne) => fetch(`${url}/${typeOne}`)\r\n    .then(response => response.json())\r\n    .then((dados) => dados)\r\n    .catch((e) => console.log(e));\r\n    \r\nexport const filterByName = (Name) => fetch(`${url}/pokemon/${Name}`)\r\n    .then(response => response.json())\r\n    .then((dados) => dados)\r\n    .catch((e) => console.log(e));","import React from 'react'\r\nimport { Nav, Navbar } from 'react-bootstrap'\r\n\r\nexport default function PokeBar({ getByTypeCat, home  }) {\r\n    return (\r\n        <>\r\n            <Navbar collapseOnSelect expand=\"md\" bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand>PokeDex</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n    <Nav.Link>{home}</Nav.Link>\r\n                        <Nav.Link>{getByTypeCat}</Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\n\r\nexport default function ListPoke({ title, filterTypes }) {\r\n    return (\r\n        <ListGroup>\r\n            <ListGroup.Item className=\"btn list-group-item list-group-item-action\" onClick={() => {\r\n                filterTypes(title)\r\n            }}>{title}</ListGroup.Item>\r\n        </ListGroup>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Card } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function PokeCard({pokemonCard}) {\r\n\r\n    return (\r\n        <Card className=\"m-2\" style={{ width: '18rem' }}>\r\n            <Card.Body>\r\n                <Card.Title> {pokemonCard.Name}</Card.Title>\r\n                <Card.Text>ATK: {pokemonCard.ATK}</Card.Text>\r\n                <Card.Text>DEF: {pokemonCard.DEF}</Card.Text>\r\n                <Card.Text>STA: {pokemonCard.STA}</Card.Text>\r\n                <Link className=\"btn btn-danger\" to={`/pokemon/${pokemonCard.Name}`}>Mais Detalhes</Link>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { Col, Container, Row, Tab } from 'react-bootstrap'\r\nimport ListPoke from './ListPoke'\r\nimport PokeCard from './PokeCard'\r\n\r\nexport default function PokeList({ data, functionFilter, filterTypes, pokemons }) {\r\n    useEffect(() => {\r\n        functionFilter()\r\n    }, [])\r\n\r\n    return (\r\n            <Container className=\"bg-warning\" fluid=\"xs\" >\r\n                <Row className=\"p-2 m-0\" >\r\n                   \r\n                    <Col xl={2}>\r\n                        {data.length == 0 ? \"Carregando...\" : data.map((item, index) => {\r\n                        return <ListPoke filterTypes={filterTypes} title={item} key={index} />\r\n                    })}\r\n                    </Col>\r\n\r\n                        <Col className=\"d-flex flex-wrap\">\r\n                            {pokemons.length == 0 ? \"Selecione alguma categoria\" : pokemons.map((item, index) => {\r\n                                return <PokeCard pokemonCard={item} key={index} />\r\n                            })}\r\n                        </Col>\r\n                </Row>\r\n            </Container>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Card, Col, Container, Row } from 'react-bootstrap';\r\nimport { filterByName } from './API';\r\n\r\nexport default function PokeListWeather({ match }) {\r\n    const [pageTitle, setPageTitle] = useState(\"...\")\r\n    const [renderDetails, setRenderDetails] = useState([])\r\n\r\n    useEffect(() => {\r\n        const { params } = match;\r\n        setPageTitle(params.id)\r\n        getPokesByName(params.id)\r\n\r\n    }, [])\r\n\r\n    function getPokesByName(pgt) {\r\n        filterByName(pgt)\r\n            .then(res => {\r\n                return setRenderDetails(res[0])\r\n            })\r\n    }\r\n\r\n    return (\r\n        <Container className=\"bg-warning\" fluid=\"xs\" >\r\n            <Row className=\"p-2 m-0\" >\r\n                <Col>\r\n                    <Card>\r\n                        <Card.Title>{pageTitle} </Card.Title>\r\n                        <Card.Body>\r\n                            <Card.Text>PokeNum: {renderDetails.pokeNum}</Card.Text>\r\n                            <Card.Text>Generation: {renderDetails.Generation} </Card.Text>\r\n                            <Card.Text>Tipo 1: {renderDetails.typeOne}</Card.Text>\r\n                            <Card.Text>ATK: {renderDetails.ATK}</Card.Text>\r\n                            <Card.Text>DEF: {renderDetails.DEF}</Card.Text>\r\n                            <Card.Text>STA: {renderDetails.STA}</Card.Text>\r\n                            <Card.Text>Status Total: {renderDetails.statTotal}</Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport { Jumbotron } from 'react-bootstrap'\r\n\r\nexport default function PokedexHeader() {\r\n    return (\r\n        <Jumbotron style={{height: '90vh'}}>\r\n        <h1>PokeDex</h1>\r\n        <p>\r\n          Para entrar no Pokedex, clique no botão \"Categoria\"\r\n        </p>\r\n      </Jumbotron>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\r\nimport { filterPokesByTypeOne, getAllPokes } from './components/API';\r\nimport PokeBar from './components/PokeBar';\r\nimport PokeList from './components/PokeList';\r\nimport PokeListWeather from './components/PokeListWeather';\r\nimport PokedexHeader from './components/PokedexHeader'\r\nfunction App() {\r\n  const [pokemons, setPokemons] = useState([]);\r\n  const [category, setCategory] = useState([]);\r\n  let all = [];\r\n\r\n  // function getAll() {\r\n  //   console.log(\"foi\");\r\n  //   getAllPokes().then(pokes => {\r\n  //     all = [pokes]\r\n  //     setPokemons(all)\r\n  //   }).catch(e => alert(e))\r\n  // }\r\n\r\n  // Filtrar as categorias Tipo Um dos pokemons\r\n  function getAllByCatOne() {\r\n    let category = new Set();\r\n    getAllPokes().then(pokes => pokes.map((v) => {\r\n      return category.add(v.typeOne)\r\n    })).then(() => {\r\n      setCategory([...category])\r\n    })\r\n  }\r\n\r\n  function filterTypes(type) {\r\n    let array = []\r\n    filterPokesByTypeOne(type)\r\n      .then(res => res.map((v) => {\r\n        return array.push(v)\r\n      })).then(() => {\r\n        setPokemons(array)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Router basename=\"/teste-desenvolvimento-web\">\r\n      <PokeBar\r\n        getByTypeCat={<Link className=\"btn btn-primary\" to=\"/categorias\">Categoria</Link>}\r\n        home={<Link className=\"btn btn-primary\" to=\"/\">Home</Link>}\r\n        getByWeatherCat={<Link to=\"/weather\">Tempo</Link>} />\r\n\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <PokedexHeader />\r\n        </Route>\r\n        <Route path=\"/categorias\">\r\n          <PokeList filterTypes={filterTypes} functionFilter={getAllByCatOne} data={category} pokemons={pokemons} />\r\n        </Route>\r\n        <Route exact path=\"/pokemon/:id\" component={ PokeListWeather } />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}